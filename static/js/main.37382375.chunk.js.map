{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","value","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","change","target","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2TAEaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAK,wBAA0BF,EAAMG,QAAQC,GAAK,yBAA0BC,IAAI,KACrF,6BAAKL,EAAMG,QAAQG,OACnB,6BAAKN,EAAMG,QAAQI,YCJlBC,G,MAAW,SAAAR,GACpB,OACA,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAC,GAAK,OACrB,cAAC,EAAD,CAAqBR,QAASQ,GAAnBA,EAAMP,WCLhBQ,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAAO,uBACHb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC2BHG,G,wDA7Bb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXT,SAAU,GACVU,YAAa,IAJJ,E,qDAOb,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAChB,SAAUe,S,oBAE1C,WAAS,IAAD,OACN,EAAgCE,KAAKR,MAA9BT,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXQ,EAAmBlB,EAASmB,QAAO,SAAAzB,GACvC,OAAOA,EAAQG,KAAKuB,cAAcC,SAASX,EAAYU,kBAEzD,OACE,sBAAK5B,UAAU,MAAf,UACE,oBAAIA,UAAU,UAAd,8BACA,cAAC,EAAD,CACEY,YAAc,iBACdC,aAAgB,SAAAiB,GAAM,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAOC,OAAOrB,WAEtE,cAAC,EAAD,CAAUF,SAAUkB,W,GAzBVM,cCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.37382375.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.style.css';\r\nexport const Card = props => {\r\n    return (\r\n        <div className='card-container'>\r\n            <img src={'https://robohash.org/' + props.monster.id + '?set=set2&size=180x180'} alt=\"\" />\r\n            <h2>{props.monster.name}</h2>\r\n            <h4>{props.monster.email}</h4>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.style.css'\r\nexport const CardList = props => {\r\n    return (\r\n    <div className='card-list'>\r\n        {props.monsters.map(value => (\r\n            <Card key={value.id} monster={value}/>\r\n        ))}\r\n    </div>\r\n    )\r\n};","import React from 'react';\r\nimport './search.style.css';\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return <input\r\n        className='search'\r\n        type='search' \r\n        placeholder={placeholder} \r\n        onChange={handleChange} \r\n    />\r\n};","import React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search/search.component'\nimport './App.css';\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n  render(){\n    const {monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n    return(\n      <div className='App'>\n        <h1 className='heading'>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder = 'Search Monster' \n          handleChange = {change => this.setState({searchField: change.target.value})} \n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}